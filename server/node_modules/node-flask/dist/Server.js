'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _koa = require('koa');

var _koa2 = _interopRequireDefault(_koa);

var _path = require('path');

var _koaRoute = require('koa-route');

var _koaRoute2 = _interopRequireDefault(_koaRoute);

var _lodash = require('lodash');

var _requireDir = require('require-dir');

var _requireDir2 = _interopRequireDefault(_requireDir);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Server = class Server extends _koa2.default {

  constructor(_ref) {
    let port = _ref.port;
    var _ref$blueprints = _ref.blueprints;
    let blueprints = _ref$blueprints === undefined ? [] : _ref$blueprints;
    var _ref$controllers = _ref.controllers;
    let controllers = _ref$controllers === undefined ? undefined : _ref$controllers;

    super();
    this.port = port;
    if (blueprints.length == 0 && controllers != undefined) {
      console.log('Warning from node-flask: naming convension changing, controllers => blueprints');
      blueprints = controllers;
    }

    if (typeof blueprints === 'string') {
      this.blueprints = (0, _lodash.map)((0, _requireDir2.default)(blueprints), b => b.default ? b.default : b);
    } else if (blueprints instanceof Array) {
      this.blueprints = blueprints;
    } else {
      this.blueprints = (0, _lodash.values)(blueprints);
    }
  }

  start() {
    return new Promise((resolve, reject) => {
      for (let blueprint of this.blueprints) {
        this.generateRouter(blueprint);
      }

      this.listen(this.port, resolve);
    });
  }

  generateRouter(Blueprint) {
    const inst = new Blueprint();
    const blueprintMiddleware = inst.middleware || [];
    let prefix = inst.prefix || Blueprint.prototype.prefix || '';
    let routes = inst.routes || Blueprint.prototype.routes || [];

    for (const route of routes) {
      let action = route.action;

      if (typeof action === 'string') {
        action = inst[route.action];
      }
      const method = route.method,
            path = route.path;
      var _route$middleware = route.middleware;
      const middleware = _route$middleware === undefined ? [] : _route$middleware;

      const actions = blueprintMiddleware.concat(middleware);
      actions.push(action);
      actions.forEach(a => {
        this.use(_koaRoute2.default[method.toLowerCase()]((0, _path.join)(prefix, path), a.bind(inst)));
      });
    }
  }
};
exports.default = Server;